/*
给你一个下标从 0 开始的 正 整数数组 nums 。
如果 nums 的一个子数组满足：移除这个子数组后剩余元素 严格递增 ，那么我们称这个子数组为 移除递增 子数组。比方说，[5, 3, 4, 6, 7] 中的 [3, 4] 是一个移除递增子数组，因为移除该子数组后，[5, 3, 4, 6, 7] 变为 [5, 6, 7] ，是严格递增的。
请你返回 nums 中 移除递增 子数组的总数目。
注意 ，剩余元素为空的数组也视为是递增的。
子数组 指的是一个数组中一段连续的元素序列。

示例 1：

输入：nums = [1,2,3,4]
输出：10
解释：10 个移除递增子数组分别为：[1], [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4] 和 [1,2,3,4]。移除任意一个子数组后，剩余元素都是递增的。注意，空数组不是移除递增子数组。

示例 2：

输入：nums = [6,5,7,8]
输出：7
解释：7 个移除递增子数组分别为：[5], [6], [5,7], [6,5], [5,7,8], [6,5,7] 和 [6,5,7,8] 。
nums 中只有这 7 个移除递增子数组。

示例 3：

输入：nums = [8,7,6,6]
输出：3
解释：3 个移除递增子数组分别为：[8,7,6], [7,6,6] 和 [8,7,6,6] 。注意 [8,7] 不是移除递增子数组因为移除 [8,7] 后 nums 变为 [6,6] ，它不是严格递增的。
* */

/*
* 知识点：双指针
* */

public class IncremovableSubarrayCountV2 {
    public long incremovableSubarrayCount(int[] nums) {
        long ans = 0;
        int len = nums.length;
        int l = 0;

        // 思想，需要左数组和右数组都严格递增，且右数组的第一个元素要大于左数组的最后一个元素

        // 正序遍历左指针l，找出最长的左数组
        while (l < len - 1) {
            if (nums[l] >= nums[l + 1]) {
                break;
            }
            l++;
        }

        // 如果整个数组都是严格递增的，那么结果为 1 + 2 + 3 + .... + nums.length
        if (l == len - 1) {
            return 1L * len * (len + 1) / 2;
        }

        // 如果整个数组不是严格递增的，那么针对最长的左数组，有l+2个移除递增子数组
        // e.g. [1, 4, 6, 3, 7, 8, 9]
        // 最长的左数组为 [1, 4, 6], l = 2
        // 那么移除递增子数组的分别为:
        // [3, 7, 8, 9]
        // [6, 3, 7, 8, 9]
        // [4, 6, 3, 7, 8, 9]
        // [1, 4, 6, 3, 7, 8, 9]
        // l+2 个
        ans += l + 2;

        // 倒序遍历右指针
        for (int r = len - 1; r > 0; r--) {
            // 逐渐反向扩张右子数组的大小，直到右子数组不是严格递增为止
            if (r < len - 1 && nums[r] >= nums[r + 1]) {
                break;
            }

            // 保证右子数组的第一个元素大于左子数组的最后一个元素
            // 如果不满足条件，缩减左子数组的边界，直到找出满足的条件为止
            while (l >= 0 && nums[l] >= nums[r]) {
                l--;
            }

            ans += l + 2;
        }

        return ans;
    }
}
